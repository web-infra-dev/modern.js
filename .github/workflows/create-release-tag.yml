name: Create Release
on:
  workflow_dispatch:
jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          echo "Branch name: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" =~ ^release-v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "Extracted version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_ENV
          else
            echo "Branch name does not match the expected format (release-vx.x.x)"
            exit 1
          fi

      - name: Get PR body
        id: get_pr_body
        uses: actions/github-script@v6
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const branchName = process.env.GITHUB_REF.replace('refs/heads/', '');

            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              base: 'main',
              head: `${context.repo.owner}:${branchName}`
            });

            if (pulls.length === 0) {
              core.setFailed('No pull request found for this branch.');
            } else {
              const pr = pulls[0];
              core.info(`Found PR: ${pr.title}`);
              core.setOutput('body', pr.body || '');
            }


      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.version }}
          release_name: v${{ env.version }}
          body: ${{ steps.get_pr_body.outputs.body }}
          draft: false
          prerelease: false
