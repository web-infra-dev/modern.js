import { dirname, join } from 'path';
import { HelmetData } from 'react-helmet-async';
import { PageData, UserConfig, DocPlugin } from 'shared/types';
import { OUTPUT_DIR, APP_HTML_MARKER, HEAD_MARKER } from './constants';
import { createModernBuilder } from './createBuilder';
import { writeSearchIndex } from './searchIndex';
import { normalizeSlash } from '@/shared/utils';
import type { Route } from '@/node/route/RouteService';

export async function bundle(rootDir: string, config: UserConfig) {
  const [clientBuilder, ssrBuilder] = await Promise.all([
    createModernBuilder(rootDir, config, false),
    createModernBuilder(rootDir, config, true, {
      output: {
        distPath: {
          root: `${config.doc?.outDir ?? OUTPUT_DIR}/ssr`,
        },
      },
    }),
  ]);
  await Promise.all([clientBuilder.build(), ssrBuilder.build()]);
  await writeSearchIndex(rootDir, config);
}

export interface SSRBundleExports {
  render: (
    url: string,
    helmetContext: object,
  ) => Promise<{ appHtml: string; pageData: PageData }>;
  routes: Route[];
}

export async function renderPages(config: UserConfig) {
  const cwd = process.cwd();
  const outputPath = join(cwd, OUTPUT_DIR);
  const ssrBundlePath = join(outputPath, 'ssr', 'bundles', 'main.js');
  const { default: fs } = await import('@modern-js/utils/fs-extra');
  const { default: ssrExports } = await import(ssrBundlePath);
  const { render, routes } = ssrExports as SSRBundleExports;
  // Get the html generated by builder, as the default ssr template
  const htmlTemplatePath = join(outputPath, 'html', 'main', 'index.html');
  const htmlTemplate = await fs.readFile(htmlTemplatePath, 'utf-8');
  const iconLink = config.doc?.icon
    ? `<link rel="icon" href="${config.doc.icon}" />`
    : '';

  await Promise.all(
    routes.map(async route => {
      const helmetContext: HelmetData = {
        context: {},
      } as HelmetData;
      const routePath = route.path;
      const { appHtml } = await render(routePath, helmetContext.context);

      const { helmet } = helmetContext.context;

      const html = htmlTemplate
        .replace(APP_HTML_MARKER, appHtml)
        .replace(
          HEAD_MARKER,
          (config.doc?.head || [])
            .concat(iconLink)
            .concat([
              helmet?.title?.toString(),
              helmet?.meta?.toString(),
              helmet?.link?.toString(),
              helmet?.style?.toString(),
            ])
            .join(''),
        );

      const normalizeHtmlFilePath = (path: string) => {
        const normalizedBase = normalizeSlash(config.doc?.base || '/');

        if (path.endsWith('/')) {
          return `${path}index.html`.replace(normalizedBase, '');
        }

        return `${path}.html`.replace(normalizedBase, '');
      };
      const fileName = normalizeHtmlFilePath(routePath);
      await fs.ensureDir(join(outputPath, dirname(fileName)));
      await fs.writeFile(join(outputPath, fileName), html);
    }),
  );
  // Remove ssr bundle
  await fs.remove(join(outputPath, 'ssr'));
  await fs.remove(join(outputPath, 'html', 'main', 'index.html'));
}

/**
 * Modify doc config
 * @param config
 * @param plugins
 * @returns doc config
 */
export async function modifyConfig(config: UserConfig, plugins: DocPlugin[]) {
  for (const plugin of plugins) {
    if (typeof plugin.config === 'function') {
      config.doc = await plugin.config(config.doc || {});
    }
  }

  return config;
}

export async function beforeBuild(config: UserConfig, plugins: DocPlugin[]) {
  // beforeBuild hooks
  return await Promise.all(
    plugins
      .filter(plugin => typeof plugin.beforeBuild === 'function')
      .map(plugin => {
        return plugin.beforeBuild!(config.doc || {});
      }),
  );
}

export async function afterBuild(config: UserConfig, plugins: DocPlugin[]) {
  // afterBuild hooks
  return await Promise.all(
    plugins
      .filter(plugin => typeof plugin.afterBuild === 'function')
      .map(plugin => {
        return plugin.afterBuild!(config.doc || {});
      }),
  );
}

export async function build(rootDir: string, config: UserConfig) {
  const docPlugins = [...(config.doc?.plugins ?? [])];
  const modifiedConfig = await modifyConfig(config, docPlugins);

  await beforeBuild(modifiedConfig, docPlugins);
  await bundle(rootDir, modifiedConfig);
  await renderPages(modifiedConfig);
  await afterBuild(modifiedConfig, docPlugins);
}
