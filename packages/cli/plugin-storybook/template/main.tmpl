const path = require('path');
const fs = require('fs-extra');

const isTsProject = <%= isTsProject %>;

const appDirectory = '<%= appDirectory %>';
const internalStories = <%= stories %>;
const sbConfigDir = '<%= sbConfigDir %>';
const userMainPath = '<%= userMainPath %>'
const enableRuntime = <%= enableRuntime %>;

let userMainConfig = {};
if (fs.existsSync(userMainPath)) {
  userMainConfig = require(userMainPath);
}

let { stories } = userMainConfig;
if (stories && Array.isArray(stories)) {
  stories = stories.map(sto => path.resolve(appDirectory, sto));
} else {
  stories = [];
}
module.exports = {
  ...userMainConfig,
  stories: stories.length > 0 ? stories : internalStories.map(storyPath => path.posix.join(path.relative(__dirname, appDirectory).split(path.sep).join(path.posix.sep), storyPath)),
  addons: [
    ...(enableRuntime ? [
      process.env.MODERN_CUSTOM_STORYBOOK_ADDON || require.resolve('@modern-js/plugin-storybook/addons/runtime-preset')
    ] : []),
    '@storybook/addon-links',
    '@storybook/addon-essentials',
    {
      name: '@storybook/addon-storysource',
      options: {
        rule: {
          include: [path.resolve(appDirectory, 'stories')],
        },
        loaderOptions: {
          prettierConfig: { printWidth: 80, singleQuote: false },
          parser: 'typescript',
        },
      },
    },
    ...(userMainConfig.addons || []),
  ],
  // Fix typescript v5 capability issue
  // https://github.com/hipstersmoothie/react-docgen-typescript-plugin/issues/78
  // https://github.com/storybookjs/storybook/issues/21642
  typescript: {
    reactDocgen: 'react-docgen-typescript-plugin'
  },
  webpackFinal: async (config, options) => {
    // change webpack config
    const { customFinalWebpack = () => config } = options;
    if (userMainConfig.webpackFinal) {
      return userMainConfig.webpackFinal(customFinalWebpack(config), options);
    }
    return customFinalWebpack(config);
  },
  managerWebpack(config, options) {
    const { customManagerWebpack = () => config } = options;
    if (userMainConfig.managerWebpack) {
      return userMainConfig.managerWebpack(config);
    }
    return customManagerWebpack(config);
  },
  core: {
    builder: 'webpack5',
    ...(userMainConfig.core || {}),
  }
};
