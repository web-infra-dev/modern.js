// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`globals usage globals is { react: 'React' }, format is iife 1`] = `
"(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // libuild:globals:react
  var require_react = __commonJS({
    "libuild:globals:react"(exports, module) {
      module.exports = (typeof globalThis !== "undefined" ? globalThis : Function("return this")() || global || self)["React"];
    }
  });

  // src/common.js
  var common_exports = {};
  __export(common_exports, {
    addPrefix: () => addPrefix
  });
  var addPrefix;
  var init_common = __esm({
    "src/common.js"() {
      addPrefix = (prefix, str) => \`\${prefix}:\${str}\`;
    }
  });

  // src/index.js
  var import_react = __toESM(require_react());
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _async_to_generator(fn) {
    return function() {
      var self2 = this, args = arguments;
      return new Promise(function(resolve, reject) {
        var gen = fn.apply(self2, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(void 0);
      });
    };
  }
  var debug = function() {
    var _ref = _async_to_generator(function* (str) {
      const { addPrefix: addPrefix2 } = yield Promise.resolve().then(() => (init_common(), common_exports));
      addPrefix2("DEBUG:", \`\${import_react.default.version}/\${str}\`);
    });
    return function debug2(str) {
      return _ref.apply(this, arguments);
    };
  }();
})();
"
`;

exports[`globals usage globals is { react: 'React' }, format is umd 1`] = `
"(function(global1, factory) {
    if (typeof module === "object" && typeof module.exports === "object") factory(exports);
    else if (typeof define === "function" && define.amd) define([
        "exports"
    ], factory);
    else if (global1 = typeof globalThis !== "undefined" ? globalThis : global1 || self) factory(global1.index = {});
})(this, function(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    Object.defineProperty(exports, "debug", {
        enumerable: true,
        get: function() {
            return debug;
        }
    });
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
            var info = gen[key](arg);
            var value = info.value;
        } catch (error) {
            reject(error);
            return;
        }
        if (info.done) {
            resolve(value);
        } else {
            Promise.resolve(value).then(_next, _throw);
        }
    }
    function _async_to_generator(fn) {
        return function() {
            var self1 = this, args = arguments;
            return new Promise(function(resolve, reject) {
                var gen = fn.apply(self1, args);
                function _next(value) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                }
                function _throw(err) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                }
                _next(undefined);
            });
        };
    }
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __esm = (fn, res)=>function __init() {
            return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
        };
    var __commonJS = (cb, mod)=>function __require() {
            return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {
                exports: {}
            }).exports, mod), mod.exports;
        };
    var __export = (target, all)=>{
        for(var name in all)__defProp(target, name, {
            get: all[name],
            enumerable: true
        });
    };
    var __copyProps = (to, from, except, desc)=>{
        if (from && typeof from === "object" || typeof from === "function") {
            for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
                get: ()=>from[key],
                enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
        }
        return to;
    };
    var __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM
        // file that has been converted to a CommonJS file using a Babel-
        // compatible transform (i.e. "__esModule" has not been set), then set
        // "default" to the CommonJS "module.exports" for node compatibility.
        isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
            value: mod,
            enumerable: true
        }) : target, mod));
    // libuild:globals:react
    var require_react = __commonJS({
        "libuild:globals:react" (exports, module1) {
            module1.exports = (typeof globalThis !== "undefined" ? globalThis : Function("return this")() || global || self)["React"];
        }
    });
    // src/common.js
    var common_exports = {};
    __export(common_exports, {
        addPrefix: ()=>addPrefix
    });
    var addPrefix;
    var init_common = __esm({
        "src/common.js" () {
            addPrefix = (prefix, str)=>\`\${prefix}:\${str}\`;
        }
    });
    // src/index.js
    var import_react = __toESM(require_react());
    var debug = function() {
        var _ref = _async_to_generator(function*(str) {
            const { addPrefix: addPrefix2 } = yield Promise.resolve().then(()=>(init_common(), common_exports));
            addPrefix2("DEBUG:", \`\${import_react.default.version}/\${str}\`);
        });
        return function debug(str) {
            return _ref.apply(this, arguments);
        };
    }();
});
"
`;
