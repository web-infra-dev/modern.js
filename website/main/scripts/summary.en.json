[
  {
    "text": "Set the URL prefix of static resources in the development environment, similar to the [output.publicPath](https://webpack.js.org/guides/public-path/) config of webpack.",
    "name": "assetPrefix",
    "dirname": "dev"
  },
  {
    "text": "Whether to enable Hot Module Replacement.",
    "name": "hmr",
    "dirname": "dev"
  },
  {
    "text": "After configuring this option, you can enable HTTPS Dev Server, and disabling the HTTP Dev Server.",
    "name": "https",
    "dirname": "dev"
  },
  {
    "text": "Specify a port number for Dev Server to listen.",
    "name": "port",
    "dirname": "dev"
  },
  {
    "text": "Whether to display progress bar during compilation.",
    "name": "progressBar",
    "dirname": "dev"
  },
  {
    "text": "`dev.startUrl` is used to set the page URL to open automatically when the Dev Server starts. By default, no page will be opened.",
    "name": "startUrl",
    "dirname": "dev"
  },
  {
    "text": "Set the file path of the app icon, which can be a relative path or an absolute path.",
    "name": "appIcon",
    "dirname": "html"
  },
  {
    "text": "Set the [crossorigin](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin) attribute of the `<script>` tag.",
    "name": "crossorigin",
    "dirname": "html"
  },
  {
    "text": "Remove the folder of the HTML files. When this option is enabled, the generated HTML file path will change from `[name]/index.html` to `[name].html`.",
    "name": "disableHtmlFolder",
    "dirname": "html"
  },
  {
    "text": "Set the favicon icon for all pages.",
    "name": "favicon",
    "dirname": "html"
  },
  {
    "text": "Set different favicon for different pages.",
    "name": "faviconByEntries",
    "dirname": "html"
  },
  {
    "text": "Set the inject position of the `<script>` tag.",
    "name": "inject",
    "dirname": "html"
  },
  {
    "text": "Set different script tag inject positions for different pages.",
    "name": "injectByEntries",
    "dirname": "html"
  },
  {
    "text": "Configure the `<meta>` tag of the HTML.",
    "name": "meta",
    "dirname": "html"
  },
  {
    "text": "Set different meta tags for different pages.",
    "name": "metaByEntries",
    "dirname": "html"
  },
  {
    "text": "By default, the `root` element is included in the HTML template for component mounting, and the element id can be modified through `mountId`.",
    "name": "mountId",
    "dirname": "html"
  },
  {
    "text": "Define the path to the HTML template, corresponding to the `template` config of [html-webpack-plugin](https://github.com/jantimon/html-webpack-plugin).",
    "name": "template",
    "dirname": "html"
  },
  {
    "text": "Set different template file for different pages.",
    "name": "templateByEntries",
    "dirname": "html"
  },
  {
    "text": "Define the parameters in the HTML template, corresponding to the `templateParameters` config of [html-webpack-plugin](https://github.com/jantimon/html-webpack-plugin). You can use the config as an object or a function.",
    "name": "templateParameters",
    "dirname": "html"
  },
  {
    "text": "Set different template parameters for different pages.",
    "name": "templateParametersByEntries",
    "dirname": "html"
  },
  {
    "text": "Set the title tag of the HTML page, for example:",
    "name": "title",
    "dirname": "html"
  },
  {
    "text": "Set different title for different pages.",
    "name": "titleByEntries",
    "dirname": "html"
  },
  {
    "text": "When using CDN in the production environment, you can use this option to set the URL prefix of static resources, similar to the [output.publicPath](https://webpack.js.org/guides/public-path/) config of webpack.",
    "name": "assetPrefix",
    "dirname": "output"
  },
  {
    "text": "`output.assetsRetry` is used to configure the retry of assets.The type of `AssetsRetryOptions` is as follows:",
    "name": "assetsRetry",
    "dirname": "output"
  },
  {
    "text": "By default, Builder's output is ASCII-only and will escape all non-ASCII characters.",
    "name": "charset",
    "dirname": "output"
  },
  {
    "text": "Whether to clean all files in the dist path before starting compilation.",
    "name": "cleanDistPath",
    "dirname": "output"
  },
  {
    "text": "By setting `output.convertToRem`, the Builder can do the following things:",
    "name": "convertToRem",
    "dirname": "output"
  },
  {
    "text": "Copies the specified file or directory to the dist directory.",
    "name": "copy",
    "dirname": "output"
  },
  {
    "text": "Sets the format of the className generated by CSS Modules after compilation.",
    "name": "cssModuleLocalIdentName",
    "dirname": "output"
  },
  {
    "text": "Set the size threshold to inline static resources such as images and fonts.",
    "name": "dataUriLimit",
    "dirname": "output"
  },
  {
    "text": "Whether to treat all `.css` files in the source directory as CSS Modules.",
    "name": "disableCssModuleExtension",
    "dirname": "output"
  },
  {
    "text": "Remove the hash from the name of static files after production build.",
    "name": "disableFilenameHash",
    "dirname": "output"
  },
  {
    "text": "Controls whether to the inline the [runtime chunk](https://webpack.js.org/configuration/optimization/#optimizationruntimechunk) to HTML.",
    "name": "disableInlineRuntimeChunk",
    "dirname": "output"
  },
  {
    "text": "Whether to disable code minification in production build.",
    "name": "disableMinimize",
    "dirname": "output"
  },
  {
    "text": "Whether to disable source map.",
    "name": "disableSourceMap",
    "dirname": "output"
  },
  {
    "text": "Set the directory of the dist files. Builder will output files to the corresponding subdirectory according to the file type.",
    "name": "distPath",
    "dirname": "output"
  },
  {
    "text": "If this option is enabled, all unrecognized files will be emitted to the dist directory; otherwise, an exception will be thrown.",
    "name": "enableAssetFallback",
    "dirname": "output"
  },
  {
    "text": "Whether to generate a manifest file that contains information of all assets.",
    "name": "enableAssetManifest",
    "dirname": "output"
  },
  {
    "text": "Whether to generate a TypeScript declaration file for CSS modules.",
    "name": "enableCssModuleTSDeclaration",
    "dirname": "output"
  },
  {
    "text": "Whether to inline output scripts files (.js files) into HTML with `<script>` tags.",
    "name": "enableInlineScripts",
    "dirname": "output"
  },
  {
    "text": "Whether to inline output style files (.css files) into HTML with `<style>` tags.",
    "name": "enableInlineStyles",
    "dirname": "output"
  },
  {
    "text": "Whether to use the new decorator proposal.",
    "name": "enableLatestDecorators",
    "dirname": "output"
  },
  {
    "text": "At build time, prevent some `import` dependencies from being packed into bundles in your code, and instead fetch them externally at runtime.",
    "name": "externals",
    "dirname": "output"
  },
  {
    "text": "Sets the filename of dist files.",
    "name": "filename",
    "dirname": "output"
  },
  {
    "text": "Configure how to handle the legal comment.",
    "name": "legalComments",
    "dirname": "output"
  },
  {
    "text": "Specifies the range of target browsers that the project is compatible with. This value will be used by [@babel/preset-env](https://babeljs.io/docs/en/babel-preset-env) and [autoprefixer](https://github.com/postcss/autoprefixer) to identify the JavaScript syntax that need to be transformed and the CSS browser prefixes that need to be added.",
    "name": "overrideBrowserslist",
    "dirname": "output"
  },
  {
    "text": "Via `output.polyfill` you can configure how the polyfill is injected.",
    "name": "polyfill",
    "dirname": "output"
  },
  {
    "text": "`output.svgDefaultExport` is used to configure the default export type of SVG files.",
    "name": "svgDefaultExport",
    "dirname": "output"
  },
  {
    "text": "Controls the Builder's caching behavior during the build process.",
    "name": "buildCache",
    "dirname": "performance"
  },
  {
    "text": "You have two ways to enable `webpack-bundle-analyzer` to analyze the size of output files:",
    "name": "bundleAnalyze",
    "dirname": "performance"
  },
  {
    "text": "`performance.chunkSplit` is used to configure the chunk splitting strategy. The type of `ChunkSplit` is as follows:",
    "name": "chunkSplit",
    "dirname": "performance"
  },
  {
    "text": "Whether to print the file sizes after production build.",
    "name": "printFileSize",
    "dirname": "performance"
  },
  {
    "text": "Whether capture timing information for each module, same as the [profile](https://webpack.js.org/configuration/other-options/#profile) config of webpack.",
    "name": "profile",
    "dirname": "performance"
  },
  {
    "text": "Whether to remove `console.xx` in production build.",
    "name": "removeConsole",
    "dirname": "performance"
  },
  {
    "text": "Whether to remove the locales of [moment.js](https://momentjs.com/).",
    "name": "removeMomentLocale",
    "dirname": "performance"
  },
  {
    "text": "Adding an integrity attribute (`integrity`) to sub-resources introduced by HTML allows the browser to verify the integrity of the introduced resource, thus preventing tampering with the downloaded resource.",
    "name": "sri",
    "dirname": "security"
  },
  {
    "text": "Create aliases to import or require certain modules, same as the [resolve.alias](https://webpack.js.org/configuration/resolve/#resolvealias) config of webpack.",
    "name": "alias",
    "dirname": "source"
  },
  {
    "text": "Whether to compile JavaScript code imported via Data URI.",
    "name": "compileJsDataURI",
    "dirname": "source"
  },
  {
    "text": "Replaces variables in your code with other values or expressions at compile time. This can be useful for allowing different behavior between development builds and production builds.",
    "name": "define",
    "dirname": "source"
  },
  {
    "text": "Define global variables. It can replace expressions like `process.env.FOO` in your code after compile. Such as:",
    "name": "globalVars",
    "dirname": "source"
  },
  {
    "text": "In order to maintain faster compilation speed, Builder will not compile files under node_modules through `babel-loader` or `ts-loader` by default, as will as the files outside the current project directory.",
    "name": "include",
    "dirname": "source"
  },
  {
    "text": "Restrict importing paths. After configuring this option, all source files can only import code from the specific paths, and import code from other paths is not allowed.",
    "name": "moduleScopes",
    "dirname": "source"
  },
  {
    "text": "Add a script before the entry file of each page. This script will be executed before the page code. It can be used to execute global logics, such as polyfill injection.",
    "name": "preEntry",
    "dirname": "source"
  },
  {
    "text": "Add a prefix to [resolve.extensions](https://webpack.js.org/configuration/resolve/#resolveextensions).",
    "name": "resolveExtensionPrefix",
    "dirname": "source"
  },
  {
    "text": "This config will determine which field of `package.json` you use to import the `npm` module. Same as the [resolve.mainFields](https://webpack.js.org/configuration/resolve/#resolvemainfields) config of webpack.",
    "name": "resolveMainFields",
    "dirname": "source"
  },
  {
    "text": "You can modify the config of [autoprefixer](https://github.com/postcss/autoprefixer) by `tools.autoprefixer`.",
    "name": "autoprefixer",
    "dirname": "tools"
  },
  {
    "text": "By `tools.babel` you can modify the options of [babel-loader](https://github.com/babel/babel-loader).",
    "name": "babel",
    "dirname": "tools"
  },
  {
    "text": "The config of [mini-css-extract-plugin](https://github.com/webpack-contrib/mini-css-extract-plugin) can be modified through `tools.cssExtract`.",
    "name": "cssExtract",
    "dirname": "tools"
  },
  {
    "text": "The config of [css-loader](https://github.com/webpack-contrib/css-loader) can be modified through `tools.cssLoader`. The default config is as follows:",
    "name": "cssLoader",
    "dirname": "tools"
  },
  {
    "text": "The config of DevServer can be modified through `tools.devServer`.",
    "name": "devServer",
    "dirname": "tools"
  },
  {
    "text": "The configs of [html-webpack-plugin](https://github.com/jantimon/html-webpack-plugin) can be modified through `tools.htmlPlugin`.",
    "name": "htmlPlugin",
    "dirname": "tools"
  },
  {
    "text": "You can enable or configure the [webpack inspector](https://github.com/modern-js-dev/webpack-inspector) through `tools.inspector`.",
    "name": "inspector",
    "dirname": "tools"
  },
  {
    "text": "You can modify the config of [less-loader](https://github.com/webpack-contrib/less-loader) via `tools.less`.",
    "name": "less",
    "dirname": "tools"
  },
  {
    "text": "When building for production, Builder will minimize the CSS code through [css-minimizer-webpack-plugin](https://github.com/webpack-contrib/css-minimizer-webpack-plugin). The config of [css-minimizer-webpack-plugin](https://github.com/webpack-contrib/css-minimizer-webpack-plugin) can be modified via `tools.minifyCss`.",
    "name": "minifyCss",
    "dirname": "tools"
  },
  {
    "text": "Builder integrates PostCSS by default, you can configure [postcss-loader](https://github.com/webpack-contrib/postcss-loader) through `tools.postcss`.",
    "name": "postcss",
    "dirname": "tools"
  },
  {
    "text": "Configure the [Pug](https://pugjs.org/) template engine.",
    "name": "pug",
    "dirname": "tools"
  },
  {
    "text": "You can modify the config of [sass-loader](https://github.com/webpack-contrib/sass-loader) via `tools.sass`.",
    "name": "sass",
    "dirname": "tools"
  },
  {
    "text": "The config of [style-loader](https://github.com/webpack-contrib/style-loader) can be set through `tools.styleLoader`. The default config is an empty object.",
    "name": "styleLoader",
    "dirname": "tools"
  },
  {
    "text": "`tools.styledComponents` config is corresponding to [babel-plugin-styled-components](https://github.com/styled-components/babel-plugin-styled-components).",
    "name": "styledComponents",
    "dirname": "tools"
  },
  {
    "text": "When building for production, Builder will minimize the JavaScript code through [terser-webpack-plugin](https://github.com/webpack-contrib/terser-webpack-plugin). The config of [terser-webpack-plugin](https://github.com/webpack-contrib/terser-webpack-plugin) can be modified via `tools.terser`.",
    "name": "terser",
    "dirname": "tools"
  },
  {
    "text": "By default, the [fork-ts-checker-webpack-plugin](https://github.com/TypeStrong/fork-ts-checker-webpack-plugin) is enabled for type checking.",
    "name": "tsChecker",
    "dirname": "tools"
  },
  {
    "text": "`ts-loader` is not enabled by default in the project. When `tools.tsLoader` is not undefined, builder will use ts-loader instead of babel-loader to compile TypeScript code.",
    "name": "tsLoader",
    "dirname": "tools"
  },
  {
    "text": "`tools.webpack` is used to configure [webpack](https://webpack.js.org/)。",
    "name": "webpack",
    "dirname": "tools"
  },
  {
    "text": "You can modify the webpack configuration by configuring `tools.webpackChain` which is type of `Function`. The function receives two parameters, the first is the original webpack chain object, and the second is an object containing some utils.",
    "name": "webpackChain",
    "dirname": "tools"
  }
]